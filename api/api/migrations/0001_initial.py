# Generated by Django 4.2.7 on 2024-01-17 16:18

import api.models.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Auth',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'pentester'), (2, 'manager'), (3, 'freelancer')], editable=False)),
                ('password', models.CharField(max_length=128)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=256, null=True)),
                ('last_name', models.CharField(blank=True, max_length=256, null=True)),
                ('is_enabled', models.BooleanField(default=False)),
                ('favorites', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), blank=True, null=True, size=4)),
                ('has_otp', models.BooleanField(default=False)),
                ('mfa_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('profile_image', models.CharField(blank=True, max_length=38, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Basic user auth model',
                'verbose_name_plural': 'Basic user auth models',
                'ordering': ['email'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MailingListItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'verbose_name': 'Mailing List Item',
                'verbose_name_plural': 'Mailing List Items',
            },
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('creation_date', models.DateField(auto_now=True)),
                ('auth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Manager',
                'verbose_name_plural': 'Managers',
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Mission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(blank=True, default='Unnamed mission', max_length=256)),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('logo', models.CharField(blank=True, max_length=38, null=True)),
                ('scope', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, max_length=64, null=True, size=None)),
                ('bucket_name', models.CharField(blank=True, max_length=48, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_missions', to=settings.AUTH_USER_MODEL)),
                ('freelance_member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='missions', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='last_updated_missions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mission',
                'verbose_name_plural': 'Missions',
                'ordering': ['start', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Pentester',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('creation_date', models.DateField(auto_now=True)),
                ('auth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pentester',
                'verbose_name_plural': 'Pentesters',
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='Recon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Recon data',
                'verbose_name_plural': 'Recon data',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('css_style', models.TextField()),
                ('cover_html', models.TextField()),
            ],
            options={
                'verbose_name': 'Report Template',
                'verbose_name_plural': 'Report Templates',
            },
        ),
        migrations.CreateModel(
            name='VulnType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Vulnerability TYPE Model',
                'verbose_name_plural': 'Vulnerability TYPES models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, max_length=8186)),
                ('severity', models.FloatField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated_date', models.DateTimeField(auto_now_add=True)),
                ('images', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), blank=True, null=True, size=4)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='last_editor', to=settings.AUTH_USER_MODEL)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mission')),
                ('vuln_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.vulntype')),
            ],
            options={
                'verbose_name': 'Vulnerability Model',
                'verbose_name_plural': 'Vulnerability models',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.manager')),
                ('members', models.ManyToManyField(blank=True, to='api.pentester')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReportHtml',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.FloatField(default=1.0)),
                ('logo', models.CharField(blank=True, max_length=512, null=True)),
                ('html_file', models.CharField(blank=True, max_length=255, null=True)),
                ('pdf_file', models.CharField(blank=True, max_length=512, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mission_id', to='api.mission')),
                ('template', models.ForeignKey(blank=True, default=None, on_delete=django.db.models.deletion.CASCADE, related_name='template_id', to='api.reporttemplate')),
            ],
            options={
                'verbose_name': 'Report Html',
                'verbose_name_plural': 'Reports Html',
            },
        ),
        migrations.CreateModel(
            name='Notes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(default='New note')),
                ('content', models.TextField(max_length=8186)),
                ('creation_date', models.DateField(auto_now=True)),
                ('last_updated', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('mission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mission')),
            ],
        ),
        migrations.CreateModel(
            name='NmapScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_timestamp', models.DateTimeField(auto_now=True)),
                ('ips', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=32), size=None)),
                ('ports', django.contrib.postgres.fields.ArrayField(base_field=api.models.utils.NmapPortField(), size=None)),
                ('os_details', models.CharField(blank=True, max_length=64, null=True)),
                ('nmap_version', models.CharField(blank=True, max_length=32, null=True)),
                ('scan_date', models.CharField(blank=True, max_length=32, null=True)),
                ('recon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nmap_runs', to='api.recon')),
            ],
            options={
                'verbose_name': 'Nmap data',
                'verbose_name_plural': 'Nmap data',
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='mission',
            name='recon',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mission', to='api.recon'),
        ),
        migrations.AddField(
            model_name='mission',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member_of', to='api.team'),
        ),
        migrations.CreateModel(
            name='Freelancer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('creation_date', models.DateField(auto_now=True)),
                ('auth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Freelancer',
                'verbose_name_plural': 'Freelancers',
                'ordering': ['creation_date'],
            },
        ),
        migrations.CreateModel(
            name='CrtSh',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dump', models.TextField()),
                ('recon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crtsh_runs', to='api.recon')),
            ],
            options={
                'verbose_name': 'crt.sh',
            },
        ),
        migrations.CreateModel(
            name='Credentials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.CharField(max_length=128)),
                ('password', models.CharField(max_length=128)),
                ('service', models.CharField(max_length=128)),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('mission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creds', to='api.mission')),
            ],
        ),
        migrations.CreateModel(
            name='ClientInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255, verbose_name='company name')),
                ('creation_date', models.DateField(verbose_name='creation date')),
                ('nb_employees', models.IntegerField(verbose_name='number of employees')),
                ('occupation', models.CharField(max_length=255, verbose_name='occupation')),
                ('legal_entity', models.CharField(max_length=255, verbose_name='legal entity')),
                ('brief_description', models.TextField(verbose_name='brief description')),
                ('mission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_info', to='api.mission')),
            ],
            options={
                'verbose_name': 'client info',
                'verbose_name_plural': 'client info',
            },
        ),
    ]
