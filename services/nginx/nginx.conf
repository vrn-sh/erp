##
## Standard configuration stuff, who cares
##
user nginx;
worker_processes auto;

##
## Store errors logs
##
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;


##
## Configure worker connections
##
events {
    worker_connections 4096;
}

##
## Webserver configuration
##
http {

    ##
    ## Support for MIME types (used for image upload/download)
    ##
    # include /etc/nginx/mime.types;

    ##
    ## Logging formatting
    ##
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    # Access log path
    access_log /var/log/nginx/access.log main;

    # Allow users to send files ?
    sendfile on;

    # timeout configuration
    keepalive_timeout 65;

    # API definitions, one per file (for when the time comes)
    # include api_conf.d/*.conf;

    # alias for the API
    upstream backend {
        server api:8000;
    }

    # alias for the web client
    upstream frontend {
        server web:3000;
    }

    server {
        listen 80;
        server_name $DOMAIN_NAME;

        # remove trailing slash
        rewrite ^/(.*)/$ /$1 permanent;

        # authorization headers
        proxy_set_header Authorization $http_authorization;
        proxy_pass_header Authorization;

        proxy_headers_hash_max_size 512;
        proxy_headers_hash_bucket_size 128;

        proxy_redirect off;

        # configuration for API endpoint
        location /api/ {

            # Pass option request if Origin is correct for CORS
            #
            # the request is cached for 2 hours on the browser
            # (cap value for mozilla firefox -- chromium is 86400)
            if ($request_method = OPTIONS) {
                add_header X-Content-Type-Option nosniff;
                add_header X-Frame-Options deny;
                add_header X-Permitted-Cross-Domain-Policies none;

                add_header Access-Control-Allow-Origin $DOMAIN_NAME;
                add_header Content-Length 0;
                add_header Content-Type text/plain;
                add_header Access-Control-Max-Age 7200;
                return 200;
            }

            # Configure headers before forwarding
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;

            # Passing request to API (but strip the /api/ )
            if ($request_uri ~* "/api/(.*)") {
                proxy_pass http://backend/$1;
            }
        }

        location / {

            # set OWASP secure headers
            proxy_set_header X-Content-Type-Option nosniff;
            proxy_set_header X-Frame-Options deny;
            proxy_set_header X-Permitted-Cross-Domain-Policies none;
            proxy_set_header Cache-Control "no-store, max-age=0";
            proxy_set_header Clear-Site-Data "\"cache\",\"cookies\",\"storage\"";
            proxy_set_header Cross-Origin-Embedder-Policy require-corp;
            proxy_set_header Cross-Origin-Opener-Policy same-origin;
            proxy_set_header Cross-Origin-Resource-Policy same-origin;
            proxy_set_header Pragma no-cache;
            proxy_set_header Referrer-Policy no-referrer;
            proxy_set_header Strict-Transport-Security "max-age=31536000 ; includeSubDomains";

            # just send the rest to the client
            proxy_set_header X-Forwarded-Host $host:$server_port;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;

            proxy_pass http://frontend;
        }
    }
}
