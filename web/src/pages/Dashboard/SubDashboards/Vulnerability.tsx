import React, { useEffect, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import '../Dashboard.scss';
import axios from 'axios';
import * as IoIcons from 'react-icons/io';
import Cookies from 'js-cookie';
import { Box, Chip, CircularProgress } from '@mui/material';
import config from '../../../config';
import DeleteConfirm from '../../../component/DeleteConfirm';
import { getCookiePart } from '../../../crypto-utils';

interface VulnProps {
    missionName: string;
}

export default function Vulnerability({ missionName }: VulnProps) {
    const location = useLocation();
    const [missionId, setMissionId] = useState(0);
    const [list, setList] = useState<
        {
            id: any;
            name: any;
            impact: any;
            vuln: any;
        }[]
    >([]);
    const recordsPerPage = 5;
    const [currentPage, setCurrentPage] = useState(1);
    const lastIndex = currentPage * recordsPerPage;
    const firstIndex = lastIndex - recordsPerPage;
    const records = list!.slice(firstIndex, lastIndex);
    const npage = Math.ceil(list.length / recordsPerPage);
    const isPentester =
        getCookiePart(Cookies.get('Token')!, 'role')?.toString() === '1';
    const nums = [...Array(npage + 1).keys()].slice(1);
    const [open, setOpen] = useState(false);
    const [vulnType, setVulnType] = useState<
        {
            id: number;
            name: string;
            description: string;
        }[]
    >([]);
    const [item, setItem] = useState<{
        id: number;
        title: string;
        type: string;
    }>();
    const navigate = useNavigate();
    const [isLoad, setIsLoad] = useState(false);

    const nextPage = () => {
        if (currentPage !== npage) {
            setCurrentPage(currentPage + 1);
        }
    };

    const prePage = () => {
        if (currentPage > 1) {
            setCurrentPage(currentPage - 1);
        }
    };

    const changePage = (n: number) => {
        setCurrentPage(n);
    };

    const editVuln = (id: number) => {
        navigate('/vuln/edit', {
            state: {
                vulnId: id,
            },
        });
    };

    const viewVuln = (id: number) => {
        navigate('/vuln/detail', {
            state: {
                vulnId: id,
            },
        });
    };

    const getVulType = async () => {
        setIsLoad(true);

        await axios
            .get(`${config.apiUrl}/vuln-type?page=1`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${getCookiePart(
                        Cookies.get('Token')!,
                        'token'
                    )}`,
                },
            })
            .then((data) => {
                const newData = data.data;
                setVulnType(newData.results);
            })
            .catch((e) => {
                throw e.message;
            })
            .finally(() => {
                setIsLoad(false);
            });
    };

    const getVulData = (vuln_type: number) => {
        let res = '';
        for (let i = 0; i < vulnType.length; i += 1) {
            if (vulnType[i].id === vuln_type) res = vulnType[i].name;
        }
        return res;
    };

    const getVulnerability = async () => {
        setIsLoad(true);

        await axios
            .get(`${config.apiUrl}/vulnerability?page=1`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${getCookiePart(
                        Cookies.get('Token')!,
                        'token'
                    )}`,
                },
            })
            .then((data) => {
                const tab = [];
                for (let i = 0; i < data.data.results.length; i += 1) {
                    if (Number(data.data.results[i].mission) === missionId) {
                        tab.push({
                            id: data.data.results[i].id,
                            name: data.data.results[i].title,
                            impact: data.data.results[i].severity,
                            vuln: getVulData(data.data.results[i].vuln_type),
                        });
                    }
                }
                tab.reverse();
                setList(tab);
            })
            .catch((e) => {
                throw e.message;
            })
            .finally(() => {
                setIsLoad(false);
            });
    };

    const modalClick = () => {
        if (!open) getVulnerability();
        setOpen(!open);
        getVulnerability();
    };

    const NavAddVul = (id: number, name: string) => {
        navigate('/vuln/add', {
            state: {
                missionId: id,
                missionName: name,
            },
        });
    };

    useEffect(() => {
        setMissionId(location.state.missionId);
        getVulType();
    }, []);

    useEffect(() => {
        getVulnerability();
    }, [vulnType]);

    return (
        <>
            {isLoad ? (
                <Box sx={{ width: '100%', marginY: '5%' }}>
                    <CircularProgress color="secondary" />
                </Box>
            ) : (
                <>
                    {' '}
                    {!list.length ? (
                        <>
                            {'  '}
                            {!isPentester ? (
                                <h3 style={{ fontFamily: 'Poppins-Regular' }}>
                                    Nothing to show
                                </h3>
                            ) : (
                                <div
                                    style={{
                                        width: '100%',
                                        display: 'flex',
                                        justifyContent: 'center',
                                        marginTop: '1rem',
                                    }}
                                >
                                    <input
                                        type="button"
                                        value="Add Vulnerability"
                                        className="addVulnBtn"
                                        onClick={() =>
                                            NavAddVul(missionId, missionName)
                                        }
                                        style={{ justifyContent: 'right' }}
                                    />
                                </div>
                            )}
                        </>
                    ) : (
                        <>
                            {(isPentester ||
                                getCookiePart(
                                    Cookies.get('Token')!,
                                    'role'
                                )?.toString() === '3') && (
                                <div
                                    style={{
                                        width: '100%',
                                        display: 'flex',
                                        justifyContent: 'flex-start',
                                        marginTop: '1rem',
                                    }}
                                >
                                    <input
                                        type="button"
                                        value="Add Vulnerability"
                                        className="addVulnBtn"
                                        onClick={() =>
                                            NavAddVul(missionId, missionName)
                                        }
                                        style={{ justifyContent: 'right' }}
                                    />
                                </div>
                            )}
                            <table
                                style={{ marginTop: '10px' }}
                                className="no_center_container"
                            >
                                <thead>
                                    <tr>
                                        <th className="md-1">Name</th>
                                        <th className="md-2">Impact</th>
                                        <th className="md-2">Type</th>
                                        <th className="md-3">Actions</th>
                                    </tr>
                                </thead>
                                {records.map((vulnerability: any) => {
                                    return (
                                        <tbody key="vulnerability">
                                            <tr key={vulnerability.id}>
                                                <td>{vulnerability.name}</td>
                                                <td>{vulnerability.impact}</td>
                                                <td>
                                                    <Chip
                                                        label={
                                                            vulnerability.vuln
                                                        }
                                                        color="warning"
                                                        variant="filled"
                                                    />
                                                </td>
                                                <td>
                                                    <input
                                                        type="button"
                                                        value="Open"
                                                        className="openBtn"
                                                        onClick={() =>
                                                            viewVuln(
                                                                vulnerability.id
                                                            )
                                                        }
                                                    />
                                                    {isPentester && (
                                                        <>
                                                            <input
                                                                type="button"
                                                                value="Edit"
                                                                className="borderBtn"
                                                                onClick={() =>
                                                                    editVuln(
                                                                        vulnerability.id
                                                                    )
                                                                }
                                                            />
                                                            <input
                                                                type="button"
                                                                value="Delete"
                                                                className="borderBtnError"
                                                                onClick={() => {
                                                                    setItem({
                                                                        id: vulnerability.id,
                                                                        title: vulnerability.name,
                                                                        type: 'vulnerability',
                                                                    });
                                                                    setOpen(
                                                                        true
                                                                    );
                                                                }}
                                                            />
                                                        </>
                                                    )}
                                                </td>
                                            </tr>
                                        </tbody>
                                    );
                                })}
                            </table>
                            <nav>
                                <ul className="pagination">
                                    <li className="page-item">
                                        <a
                                            href="#"
                                            className="page-link"
                                            onClick={prePage}
                                        >
                                            <IoIcons.IoIosArrowBack />
                                        </a>
                                    </li>
                                    {nums.map((n) => {
                                        return (
                                            <li
                                                key={n}
                                                className={`page-item ${
                                                    currentPage === n
                                                        ? 'active'
                                                        : ''
                                                }`}
                                            >
                                                <a
                                                    href="#"
                                                    className="page-link"
                                                    onClick={() =>
                                                        changePage(n)
                                                    }
                                                >
                                                    {n}
                                                </a>
                                            </li>
                                        );
                                    })}
                                    <li className="page-item">
                                        <a
                                            href="#"
                                            className="page-link"
                                            onClick={nextPage}
                                        >
                                            <IoIcons.IoIosArrowForward />
                                        </a>
                                    </li>
                                </ul>
                            </nav>
                        </>
                    )}
                </>
            )}
            {open && <DeleteConfirm item={item!} func={modalClick} />}
        </>
    );
}
