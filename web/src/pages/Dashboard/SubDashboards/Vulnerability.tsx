import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import '../Dashboard.scss';
import axios from 'axios';
import * as IoIcons from 'react-icons/io';
import Cookies from 'js-cookie';
import config from '../../../config';
import DeleteConfirm from '../../../component/DeleteConfirm';

export default function Vulnerability() {
    const [list, setList] = useState<
        {
            id: any;
            name: any;
            impact: any;
            vuln: any;
            mission: any;
        }[]
    >([]);
    const recordsPerPage = 5;
    const [currentPage, setCurrentPage] = useState(1);
    const lastIndex = currentPage * recordsPerPage;
    const firstIndex = lastIndex - recordsPerPage;
    const records = list!.slice(firstIndex, lastIndex);
    const npage = Math.ceil(list.length / recordsPerPage);
    const isPentester = Cookies.get('Role') === '1';
    const nums = [...Array(npage + 1).keys()].slice(1);
    const [open, setOpen] = useState(false);
    const [missions, setMissionList] = useState<{ id: number; name: string }[]>(
        []
    );
    const [item, setItem] = useState<{
        id: number;
        title: string;
        type: string;
    }>();
    const navigate = useNavigate();

    const nextPage = () => {
        if (currentPage !== npage) {
            setCurrentPage(currentPage + 1);
        }
    };

    const prePage = () => {
        if (currentPage > 1) {
            setCurrentPage(currentPage - 1);
        }
    };

    const changePage = (n: number) => {
        setCurrentPage(n);
    };

    const addVuln = () => {
        navigate('/vuln/add');
    };

    const editVuln = (id: number) => {
        navigate('/vuln/edit', {
            state: {
                vulnId: id,
            },
        });
    };

    const getMission = async () => {
        await axios
            .get(`${config.apiUrl}/mission?page=1`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${Cookies.get('Token')}`,
                },
            })
            .then((data) => {
                const tab: any = [];
                for (let i = 0; i < data.data.results.length; i += 1) {
                    tab.push({
                        id: data.data.results[i].id,
                        name: data.data.results[i].name,
                    });
                }
                setMissionList(tab);
            })
            .catch((e) => {
                throw e;
            });
    };

    const getName = (id: number) => {
        const name = missions.find((elem) => elem.id === id);
        return name ? name.name : '';
    };

    const getVulnerability = async () => {
        await axios
            .get(`${config.apiUrl}/vulnerability?page=1`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${Cookies.get('Token')}`,
                },
            })
            .then(async (data) => {
                await getMission();
                const tab = [];
                for (let i = 0; i < data.data.results.length; i += 1) {
                    tab.push({
                        id: data.data.results[i].id,
                        name: data.data.results[i].title,
                        impact: data.data.results[i].severity,
                        vuln: data.data.results[i].vuln_type,
                        mission: getName(data.data.results[i].mission),
                    });
                }
                tab.reverse();
                setList(tab);
            })
            .catch((e) => {
                throw e.message;
            });
    };

    const modalClick = () => {
        if (!open) getVulnerability();
        setOpen(!open);
    };

    useEffect(() => {
        getVulnerability();
    }, []);

    return (
        <>
            {!list.length && !isPentester ? (
                <h3 style={{ fontFamily: 'Poppins-Regular' }}>
                    Nothing to show
                </h3>
            ) : (
                <>
                    <table
                        style={{ marginTop: '10px' }}
                        className="no_center_container"
                    >
                        <thead>
                            <tr>
                                <th className="md-3">Name</th>
                                <th className="md-3">Mission</th>
                                <th className="md-2">Impact</th>
                                <th className="md-2">Type</th>
                                <th className="md-2">Actions</th>
                            </tr>
                        </thead>
                        {records.map((vulnerability: any) => {
                            return (
                                <tbody key={vulnerability.id}>
                                    <tr key={vulnerability.id}>
                                        <td>{vulnerability.name}</td>
                                        <td>{vulnerability.mission}</td>
                                        <td>{vulnerability.impact}</td>
                                        <td>{vulnerability.vuln}</td>
                                        <td>
                                            <input
                                                type="button"
                                                value="Open"
                                                className="openBtn"
                                            />
                                            {isPentester && (
                                                <>
                                                    <input
                                                        type="button"
                                                        value="Edit"
                                                        className="borderBtn"
                                                        onClick={() =>
                                                            editVuln(
                                                                vulnerability.id
                                                            )
                                                        }
                                                    />
                                                    <a
                                                        href="#"
                                                        className="borderBtnError"
                                                        onClick={() => {
                                                            setItem({
                                                                id: vulnerability.id,
                                                                title: vulnerability.name,
                                                                type: 'vulnerability',
                                                            });
                                                            setOpen(true);
                                                        }}
                                                    >
                                                        <IoIcons.IoIosTrash
                                                            size={20}
                                                        />
                                                    </a>
                                                </>
                                            )}
                                        </td>
                                    </tr>
                                </tbody>
                            );
                        })}
                    </table>
                    <nav>
                        <ul className="pagination">
                            <li className="page-item">
                                <a
                                    href="#"
                                    className="page-link"
                                    onClick={prePage}
                                >
                                    <IoIcons.IoIosArrowBack />
                                </a>
                            </li>
                            {nums.map((n) => {
                                return (
                                    <li
                                        key={n}
                                        className={`page-item ${
                                            currentPage === n ? 'active' : ''
                                        }`}
                                    >
                                        <a
                                            href="#"
                                            className="page-link"
                                            onClick={() => changePage(n)}
                                        >
                                            {n}
                                        </a>
                                    </li>
                                );
                            })}
                            <li className="page-item">
                                <a
                                    href="#"
                                    className="page-link"
                                    onClick={nextPage}
                                >
                                    <IoIcons.IoIosArrowForward />
                                </a>
                            </li>
                        </ul>
                    </nav>
                </>
            )}
            {open && <DeleteConfirm item={item!} func={modalClick} />}
        </>
    );
}
