import React, { useEffect, useState } from 'react';
import '../EditMission/Mission.scss';
import './Vulnerability.scss';
import '../Settings/Settings.scss';
import {
    ImageList,
    ImageListItem,
    Stack,
    ImageListItemBar,
    Tooltip,
    Link,
    Box,
    CircularProgress,
} from '@mui/material';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import Cookies from 'js-cookie';
import { AiFillBug, AiFillEye } from 'react-icons/ai';
import { FaRegCalendarAlt } from 'react-icons/fa';
import { PiWarningBold } from 'react-icons/pi';
import { TbTargetArrow } from 'react-icons/tb';
import { MdReportProblem } from 'react-icons/md';
import dayjs, { Dayjs } from 'dayjs';
import vulnerabilities from '../../assets/strings/en/vulnerabilities.json';
import config from '../../config';
import TopBar from '../../component/SideBar/TopBar';
import SideBar from '../../component/SideBar/SideBar';
import { getCookiePart } from '../../crypto-utils';

export default function VulnerabilityDetail() {
    const [images, setImages] = useState<string[]>([]);
    const [vuln, setVuln] = useState('');
    const [impactId, setImpact] = useState(0);
    const [content, setContent] = useState('');
    const [title, setTitle] = useState('');
    const [date, setDate] = useState<Dayjs>(dayjs());
    const [id, setId] = useState(0);
    const location = useLocation();
    const [mission, setMission] = useState('');
    const [missionName, setMissionName] = useState('');
    const navigate = useNavigate();
    const [isLoad, setIsLoad] = useState(false);

    const editVuln = () => {
        navigate('/vuln/edit', {
            state: {
                vulnId: id,
            },
        });
    };
    const getMission = async () => {
        setIsLoad(true);

        await axios
            .get(`${config.apiUrl}/mission/${mission}`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${getCookiePart(
                        Cookies.get('Token')!,
                        'token'
                    )}`,
                },
            })
            .then((data) => {
                setMissionName(data.data.title);
            })
            .catch((e) => {
                throw new Error(e);
            })
            .finally(() => {
                setIsLoad(false);
            });
    };

    const getVulnerability = async () => {
        setIsLoad(true);

        await axios
            .get(`${config.apiUrl}/vulnerability/${id}`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${getCookiePart(
                        Cookies.get('Token')!,
                        'token'
                    )}`,
                },
            })
            .then((data) => {
                console.log(data); // Ajoutez ceci pour afficher les données reçues
                setContent(data.data.description);
                setTitle(data.data.title);
                setImpact(data.data.severity);
                setVuln(
                    vulnerabilities.vulnerabilities[data.data.vuln_type - 1]
                        .name
                );
                setMission(data.data.mission);
                setDate(dayjs(data.data.last_updated));
                setImages(data.data.images);
            })
            .catch((e) => {
                throw e.message;
            })
            .finally(() => {
                setIsLoad(false);
            });
    };
    useEffect(() => {
        setId(location.state.vulnId);
    }, []);
    useEffect(() => {
        getVulnerability();
    }, [id]);
    useEffect(() => {
        getMission();
    }, [mission]);
    return (
        <div className="dashboard">
            <SideBar />
            <div className="dashboard_container">
                <TopBar />
                {isLoad ? (
                    <Box sx={{ marginY: '5%' }}>
                        <CircularProgress color="secondary" />
                    </Box>
                ) : (
                    <>
                        <div className="page-info">
                            <div>
                                <Stack
                                    direction="row"
                                    ml="3.5em"
                                    alignItems="center"
                                    spacing={2}
                                >
                                    <MdReportProblem color="#bbb" size={24} />
                                    <h2>{title}</h2>
                                </Stack>
                                <Stack
                                    direction="row"
                                    ml="3.5em"
                                    alignItems="center"
                                    spacing={2}
                                >
                                    <TbTargetArrow color="#bbb" size={20} />
                                    <p>{missionName}</p>
                                </Stack>
                                <Stack
                                    direction="row"
                                    ml="3.5em"
                                    mt={2}
                                    alignItems="center"
                                    spacing={2}
                                >
                                    <FaRegCalendarAlt color="#bbb" size={20} />
                                    <p>{date.format('LL')}</p>
                                    <AiFillBug color="#bbb" size={20} />
                                    <p>{vuln}</p>
                                    <PiWarningBold color="#bbb" size={20} />
                                    <p>{impactId}</p>
                                </Stack>
                            </div>
                        </div>
                        <div className="general-container">
                            <div className="vuln-form">
                                <h4 style={{ textAlign: 'left', margin: '0' }}>
                                    Description
                                </h4>
                                <p
                                    style={{
                                        fontSize: '17px',
                                        fontFamily: 'Poppins-Regular',
                                        display: 'flex',
                                        textAlign: 'justify',
                                    }}
                                >
                                    {content}
                                </p>
                                <br />
                                {images && (
                                    <h4
                                        style={{
                                            textAlign: 'left',
                                            margin: '0',
                                        }}
                                    >
                                        Preview
                                    </h4>
                                )}
                                <div style={{ display: 'flex' }}>
                                    {images.map((item) => (
                                        <ImageListItem key={item.slice(-9)}>
                                            <img
                                                src={item}
                                                alt={item}
                                                loading="lazy"
                                            />
                                            <ImageListItemBar
                                                sx={{
                                                    background:
                                                        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +
                                                        'rgba(0,0,0,0.3) 90%, rgba(0,0,0,0) 100%)',
                                                }}
                                                position="top"
                                                actionIcon={
                                                    <Tooltip
                                                        placement="top-start"
                                                        title="View"
                                                    >
                                                        <Link
                                                            href={item}
                                                            underline="none"
                                                            target="_blank"
                                                            ml="10px"
                                                        >
                                                            <AiFillEye color="white" />
                                                        </Link>
                                                    </Tooltip>
                                                }
                                                actionPosition="left"
                                            />
                                        </ImageListItem>
                                    ))}
                                </div>
                                <div
                                    style={{ display: 'flex', width: '150px' }}
                                >
                                    <button
                                        type="submit"
                                        className="submit-button"
                                        onClick={() => editVuln()}
                                    >
                                        Edit
                                    </button>
                                </div>
                            </div>
                        </div>
                    </>
                )}
            </div>
        </div>
    );
}
