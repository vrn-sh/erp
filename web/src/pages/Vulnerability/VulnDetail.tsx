import React, { useEffect, useState } from 'react';
import '../EditMission/Mission.scss';
import './Vulnerability.scss';
import '../Settings/Settings.scss';
import { MdUploadFile } from 'react-icons/md';
import {
    SelectChangeEvent,
    Select,
    MenuItem,
    TextField,
    Slider,
    Box,
    ImageList,
    ImageListItem,
    Stack,
    ImageListItemBar,
    IconButton,
    Tooltip,
    AppBar,
    Dialog,
    Slide,
    Toolbar,
} from '@mui/material';
import { useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import Cookies from 'js-cookie';
import SideBar from '../../component/SideBar/SideBar';
import TopBar from '../../component/SideBar/TopBar';
import Feedbacks from '../../component/Feedback';
import config from '../../config';
import vulnerabilities from '../../assets/strings/en/vulnerabilities.json';
import { AiFillBug, AiFillEye, AiOutlineClose } from 'react-icons/ai';
import { FaRegCalendarAlt } from 'react-icons/fa';
import { PiWarningBold } from 'react-icons/pi';
import { TransitionProps } from '@mui/material/transitions';
import { TbTargetArrow } from 'react-icons/tb';

const MAX_IMAGES = 4;

const itemData = [
    {
        img: 'https://images.unsplash.com/photo-1551963831-b3b1ca40c98e',
        title: 'Breakfast',
    },
    {
        img: 'https://images.unsplash.com/photo-1551782450-a2132b4ba21d',
        title: 'Burger',
    },
    {
        img: 'https://images.unsplash.com/photo-1522770179533-24471fcdba45',
        title: 'Camera',
    },
    {
        img: 'https://images.unsplash.com/photo-1444418776041-9c7e33cc5a9c',
        title: 'Coffee',
    },
];

const Transition = React.forwardRef(function Transition(
    props: TransitionProps & {
        children: React.ReactElement;
    },
    ref: React.Ref<unknown>
) {
    return <Slide direction="up" ref={ref} {...props} />;
});

export interface IFocusImage {
    open: boolean;
    close: any;
    imgUrl: string;
}

const FocusImage = ({ open, close, imgUrl }: IFocusImage) => {
    const handleClose = () => {
        close();
    };

    return (
        <Dialog
            fullScreen
            open={open}
            onClose={handleClose}
            TransitionComponent={Transition}
        >
            <AppBar
                sx={{
                    position: 'static',
                    background:
                        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +
                        'rgba(0,0,0,0.3) 90%, rgba(0,0,0,0) 100%)',
                }}
            >
                <Toolbar>
                    <IconButton
                        edge="start"
                        color="inherit"
                        onClick={handleClose}
                        aria-label="close"
                    >
                        <AiOutlineClose />
                    </IconButton>
                </Toolbar>
            </AppBar>
            <img
                src={`${`${imgUrl}`}?w=auto&h=auto&fit=crop&auto=format`}
                srcSet={`${`${imgUrl}`}?w=auto&h=auto&fit=crop&auto=format&dpr=2 2x`}
                loading="lazy"
                style={{
                    background:
                        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +
                        'rgba(0,0,0,0.3) 90%, rgba(0,0,0,0) 100%)',
                }}
            />
        </Dialog>
    );
};

export default function VulnerabilityDetail() {
    const [images, setImages] = useState<string[]>([]);
    const [vuln, setVuln] = useState('');
    const [impactId, setImpact] = useState(0);
    const [content, setContent] = useState('');
    const [message, setMess] = useState<{ mess: string; color: string }>({
        mess: '',
        color: 'success',
    });
    const [title, setTitle] = useState('');
    const [date, setDate] = useState('');
    const [id, setId] = useState(0);
    const location = useLocation();
    const [open, setOpen] = useState(false);
    const [mission, setMission] = useState('');
    const [idMission, setIdMission] = useState<{ id: number; title: string }[]>(
        [{ id: 0, title: '' }]
    );
    const [fileListe, setFileList] = useState<File[]>([]);
    const files = fileListe ? [...fileListe] : [];
    const [missionId, setMissionId] = useState(0);
    const [missionName, setMissionName] = useState('');
    const navigate = useNavigate();
    const [image, setImage] = useState<string[]>([]);
    const [currentImg, setCurrent] = useState<string>('');

    const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
        const fileList = e.target.files;
        // image.push(e.target.value);

        if (fileList) {
            const newImages = [...images];
            const newlist = [...fileListe];
            for (
                let i = 0;
                i < fileList.length && newImages.length < MAX_IMAGES;
                i += 1
            ) {
                newImages.push(URL.createObjectURL(fileList[i]));
                newlist.push(fileList[i]);
            }
            setImages(newImages);
            setFileList(newlist);
        }
    };

    // CrÃ©er une grille d'images
    const imageGrid = [];
    for (let i = 0; i < MAX_IMAGES; i += 2) {
        const row = (
            <div className="image-row" key={i}>
                {images[i] && (
                    <img src={images[i]} alt="" className="uploaded-image" />
                )}
                {images[i + 1] && (
                    <img
                        src={images[i + 1]}
                        alt=""
                        className="uploaded-image"
                    />
                )}
            </div>
        );
        imageGrid.push(row);
    }

    const CancelVuln = () => {
        navigate('/dashboard');
    };

    const takeContent = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
        setContent(event.target.value);
    };

    const takeMission = (event: SelectChangeEvent) => {
        setMission(event.target.value);
    };

    const handleChange = (event: SelectChangeEvent) => {
        setVuln(event.target.value);
    };

    const handleChangeImpact = (num: number) => {
        setImpact(num);
        return num.toString();
    };

    const setMessage = (mess: string, color: string) => {
        setMess({ mess, color });
    };

    const handleClickOpen = () => {
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
    };

    const getMission = async () => {
        // await axios
        //     .get(`${config.apiUrl}/mission?page=1`, {
        //         headers: {
        //             'Content-type': 'application/json',
        //             Authorization: `Token ${Cookies.get('Token')}`,
        //         },
        //     })
        //     .then((data) => {
        //         const tab: {
        //             id: number;
        //             title: string;
        //         }[] = [];
        //         for (let i = 0; i < data.data.results.length; i += 1) {
        //             const res = data.data.results[i];
        //             const test = {
        //                 id: res.id,
        //                 title: res.title,
        //             };
        //             tab.push(test);
        //         }
        //         setIdMission(tab);
        //     })
        //     .catch((e) => {
        //         throw new Error(e);
        //     });
    };

    const getVulnerability = async () => {
        setContent(
            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Aenean vel elit scelerisque mauris. Tincidunt eget nullam non nisi est sit amet facilisis. Non arcu risus quis varius quam quisque. Viverra nam libero justo laoreet sit amet cursus sit. Morbi enim nunc faucibus a. Ultrices tincidunt arcu non sodales. Dignissim sodales ut eu sem integer vitae justo eget. Nam libero justo laoreet sit amet. At tellus at urna condimentum mattis. Dolor sit amet consectetur adipiscing elit. In aliquam sem fringilla ut morbi tincidunt. Dolor morbi non arcu risus quis varius quam quisque. Convallis convallis tellus id interdum velit laoreet id donec. Dui sapien eget mi proin sed libero. \n\nDiam vel quam elementum pulvinar. Est ultricies integer quis auctor elit sed. Eu ultrices vitae auctor eu augue ut lectus arcu bibendum. Nulla pharetra diam sit amet nisl suscipit adipiscing bibendum. Cursus eget nunc scelerisque viverra mauris in aliquam. Sit amet venenatis urna cursus eget. Odio euismod lacinia at quis risus sed. Volutpat commodo sed egestas egestas fringilla phasellus faucibus. Faucibus vitae aliquet nec ullamcorper sit amet. Arcu dictum varius duis at consectetur. Sem et tortor consequat id porta nibh.'
        );
        setTitle('Vulnerability 5');
        setImpact(7.2);
        setVuln(vulnerabilities.vulnerabilities[2].name);
        setMission('Mission 3');
        setDate('April 2, 2023');
        // await axios
        //     .get(`${config.apiUrl}/vulnerability/${id}`, {
        //         headers: {
        //             'Content-type': 'application/json',
        //             Authorization: `Token ${Cookies.get('Token')}`,
        //         },
        //     })
        //     .then((data) => {
        //         console.log(data);
        // setContent(data.data.description);
        // setTitle(data.data.title);
        // setImpact(data.data.severity);
        // setVuln(
        //     vulnerabilities.vulnerabilities[data.data.vuln_type - 1]
        //         .name
        // );
        // setMission(data.data.mission);

        // })
        // .catch((e) => {

        //     throw e.message;
        // });
    };

    useEffect(() => {
        // setId(location.state.vulnId);
        setId(2);
    }, []);

    useEffect(() => {
        getMission();
        getVulnerability();
    }, [id]);

    return (
        <div className="dashboard">
            <SideBar />
            <div className="dashboard_container">
                <TopBar />
                <div className="page-info">
                    <div>
                        <h2 style={{ fontSize: '28px', fontFamily: 'Arial' }}>
                            {title}
                        </h2>
                        <Stack
                            direction="row"
                            ml={'11%'}
                            alignItems="center"
                            spacing={2}
                        >
                            <TbTargetArrow color={'#bbb'} size={20} />
                            <p>{mission}</p>
                        </Stack>
                        <Stack
                            direction="row"
                            ml={'3.5em'}
                            mt={2}
                            alignItems="center"
                            spacing={2}
                        >
                            <FaRegCalendarAlt color={'#bbb'} size={20} />
                            <p>{date}</p>
                            <AiFillBug color={'#bbb'} size={20} />
                            <p>{vuln}</p>
                            <PiWarningBold color={'#bbb'} size={20} />
                            <p>{impactId}</p>
                        </Stack>
                    </div>
                </div>
                <div className="general-container">
                    <div className="vuln-form">
                        <h4 style={{ textAlign: 'left', margin: '0' }}>
                            Description
                        </h4>

                        <p
                            style={{
                                fontSize: '17px',
                                fontFamily: 'Poppins-Regular',
                                display: 'flex',
                                textAlign: 'justify',
                            }}
                        >
                            {content}
                        </p>
                        <br />
                        <h4 style={{ textAlign: 'left', margin: '0' }}>
                            Preview
                        </h4>

                        <ImageList
                            sx={{ width: 'full', height: 450 }}
                            cols={2}
                            rowHeight={275}
                            variant="quilted"
                        >
                            {itemData.map((item) => (
                                <ImageListItem key={item.img}>
                                    <img
                                        src={`${item.img}?w=164&h=164&fit=crop&auto=format`}
                                        srcSet={`${item.img}?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}
                                        alt={item.title}
                                        loading="lazy"
                                    />
                                    <ImageListItemBar
                                        sx={{
                                            background:
                                                'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +
                                                'rgba(0,0,0,0.3) 90%, rgba(0,0,0,0) 100%)',
                                        }}
                                        position="top"
                                        actionIcon={
                                            <Tooltip
                                                placement="top-start"
                                                title={'View'}
                                            >
                                                <IconButton
                                                    sx={{ color: 'white' }}
                                                    aria-label={`star ${item.title}`}
                                                    onClick={() => {
                                                        setCurrent(item.img);
                                                        handleClickOpen();
                                                    }}
                                                >
                                                    <AiFillEye />
                                                </IconButton>
                                            </Tooltip>
                                        }
                                        actionPosition="left"
                                    />
                                </ImageListItem>
                            ))}
                        </ImageList>
                        <div style={{ display: 'flex', width: '150px' }}>
                            <button
                                type="submit"
                                className="submit-button"
                                onClick={() => {
                                    setOpen(true);
                                    getVulnerability();
                                }}
                            >
                                Edit
                            </button>
                        </div>
                        {open && (
                            <FocusImage
                                open={open}
                                close={handleClose}
                                imgUrl={currentImg}
                            />
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
}
