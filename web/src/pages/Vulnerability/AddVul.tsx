import React, { useState } from 'react';
import '../EditMission/Mission.scss';
import './Vulnerability.scss';
import '../Settings/Settings.scss';
import { MdUploadFile } from 'react-icons/md';
import { SelectChangeEvent, Select, MenuItem, TextField } from '@mui/material';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import Cookies from 'js-cookie';
import SideBar from '../../component/SideBar/SideBar';
import TopBar from '../../component/SideBar/TopBar';
import Feedbacks from '../../component/Feedback';
import config from '../../config';
import vulnerabilty from '../../assets/strings/en/vuln.json';
import impact from '../../assets/strings/en/impact.json';
import { Input } from '../EditMission/EditMission';

const MAX_IMAGES = 4;

export default function AddVulnerability() {
    const [images, setImages] = useState<string[]>([]);
    const [vuln, setVuln] = useState('0');
    const [impactId, setImpact] = useState('0');
    const [content, setContent] = useState('');
    const [message, setMess] = useState<{ mess: string; color: string }>({
        mess: '',
        color: 'success',
    });
    const [title, setTitle] = useState('');
    const [open, setOpen] = useState(false);
    const [mission, setMission] = useState('0');
    const [idMission, setIdMission] = useState<{ id: number; title: string }[]>(
        [{ id: 0, title: '' }]
    );
    const navigate = useNavigate();

    const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
        const fileList = e.target.files;
        if (fileList) {
            const newImages = [...images];
            for (
                let i = 0;
                i < fileList.length && newImages.length < MAX_IMAGES;
                i += 1
            ) {
                newImages.push(URL.createObjectURL(fileList[i]));
            }
            setImages(newImages);
        }
    };

    // CrÃ©er une grille d'images
    const imageGrid = [];
    for (let i = 0; i < MAX_IMAGES; i += 2) {
        const row = (
            <div className="image-row" key={i}>
                {images[i] && (
                    <img src={images[i]} alt="" className="uploaded-image" />
                )}
                {images[i + 1] && (
                    <img
                        src={images[i + 1]}
                        alt=""
                        className="uploaded-image"
                    />
                )}
            </div>
        );
        imageGrid.push(row);
    }

    const CancelVuln = () => {
        navigate('/dashboard');
    };

    const takeContent = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
        setContent(event.target.value);
    };

    const takeMission = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
        setMission(event.target.value);
    };

    const handleChange = (event: SelectChangeEvent) => {
        setVuln(event.target.value);
    };

    const handleChangeImpact = (event: SelectChangeEvent) => {
        setImpact(event.target.value);
    };

    const setMessage = (mess: string, color: string) => {
        setMess({ mess, color });
    };

    const close = () => {
        setOpen(false);
    };

    const getMission = async () => {
        await axios
            .get(`${config.apiUrl}/mission?page=1`, {
                headers: {
                    'Content-type': 'application/json',
                    Authorization: `Token ${Cookies.get('Token')}`,
                },
            })
            .then((data) => {
                const tab: {
                    id: number;
                    title: string;
                }[] = [];
                for (let i = 0; i < data.data.results.length; i += 1) {
                    const res = data.data.results[i];
                    const test = {
                        id: res.id,
                        title: res.title,
                    };
                    tab.push(test);
                }
                setIdMission(tab);
            })
            .catch((e) => {
                throw new Error(e);
            });
    };

    const handleSubmit = async () => {
        await axios
            .post(
                `${config.apiUrl}/vulnerability`,
                {
                    title,
                    severity: impactId,
                    vuln_type: vuln,
                    mission,
                    description: content,
                    images,
                },
                {
                    headers: {
                        'Content-type': 'application/json',
                        Authorization: `Token ${Cookies.get('Token')}`,
                    },
                }
            )
            .then(() => {
                setMessage('Created!', 'success');
            })
            .catch((e) => {
                setMessage(e.message, 'error');
            });
    };

    return (
        <div className="dashboard">
            <SideBar />
            <div className="dashboard_container">
                <TopBar />
                <div className="page-info">
                    <div>
                        <h2 style={{ fontSize: '28px', fontFamily: 'Arial' }}>
                            Add Vulnerability
                        </h2>
                    </div>
                    <div className="page-searcher">
                        <label>Search on page</label>
                        <input type="text" placeholder="Search..." />
                    </div>
                </div>
                <div className="general-container">
                    <div
                        style={{
                            textAlign: 'left',
                            marginLeft: '50px',
                            marginBottom: '0px',
                        }}
                    >
                        <h4 style={{ marginBottom: '0px' }}>
                            <span>Add vulnerability to :</span>{' '}
                            <Select
                                labelId="Select Impact"
                                id="Team-select"
                                value={mission}
                                required
                                label="Mission"
                                onChange={takeMission}
                            >
                                {idMission.map((value) => {
                                    return (
                                        <MenuItem
                                            sx={{
                                                fontFamily: 'Poppins-Regular',
                                                fontSize: '14px',
                                            }}
                                            value={value.id}
                                        >
                                            {value.title}
                                        </MenuItem>
                                    );
                                })}
                            </Select>{' '}
                            <span
                                style={{
                                    fontFamily: 'Poppins-light',
                                    fontSize: '12px',
                                }}
                            >
                                Choose a mission
                            </span>
                        </h4>
                    </div>
                    <div className="vuln-form">
                        <Input
                            label="Title"
                            labelState={title}
                            setLabel={setTitle}
                            size="medium"
                        />
                        <div
                            style={{
                                display: 'flex',
                                width: '100%',
                                marginTop: '10px',
                            }}
                        >
                            <Select
                                labelId="Select Vulnerability"
                                id="Team-select"
                                value={vuln}
                                fullWidth
                                required
                                label="Vulnerability"
                                onChange={handleChange}
                            >
                                {vulnerabilty.vulnerabilty.map(
                                    (value, index) => {
                                        return (
                                            <MenuItem
                                                sx={{
                                                    fontFamily:
                                                        'Poppins-Regular',
                                                    fontSize: '14px',
                                                }}
                                                value={index}
                                            >
                                                {value}
                                            </MenuItem>
                                        );
                                    }
                                )}
                            </Select>
                            {'     '}
                            <Select
                                labelId="Select Impact"
                                id="Team-select"
                                value={impactId}
                                required
                                fullWidth
                                label="Impact"
                                onChange={handleChangeImpact}
                            >
                                {impact.impact.map((value, index) => {
                                    return (
                                        <MenuItem
                                            sx={{
                                                fontFamily: 'Poppins-Regular',
                                                fontSize: '14px',
                                            }}
                                            value={index}
                                        >
                                            {value}
                                        </MenuItem>
                                    );
                                })}
                            </Select>
                        </div>
                        <TextField
                            id="outlined-multiline-static"
                            label="Current State"
                            multiline
                            rows={6}
                            fullWidth
                            margin="dense"
                            onChange={takeContent}
                            // defaultValue="Default Value"
                        />
                        <br />
                        <h4 style={{ textAlign: 'left', margin: '0' }}>
                            Add Screenshots (4 max)
                        </h4>

                        <div className="image-upload">
                            <label htmlFor="file-input">
                                <MdUploadFile size={30} />
                            </label>
                            <input
                                type="file"
                                id="file-input"
                                accept="image/*"
                                multiple
                                onChange={handleFileInput}
                                style={{ display: 'none' }}
                            />
                            <div className="image-grid">{imageGrid}</div>
                        </div>
                        <div style={{ display: 'flex', width: '150px' }}>
                            <button
                                type="button"
                                className="cancel-btn"
                                onClick={CancelVuln}
                            >
                                Cancel
                            </button>
                            <button
                                type="submit"
                                className="submit-button"
                                onClick={() => {
                                    setOpen(true);
                                    handleSubmit();
                                }}
                            >
                                ADD
                            </button>
                        </div>
                    </div>
                    {open && (
                        <Feedbacks
                            mess={message.mess}
                            color={message.color}
                            close={close}
                            open={open}
                        />
                    )}
                </div>
            </div>
        </div>
    );
}
